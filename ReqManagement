import React, { useState, useEffect, useMemo } from 'react';
import { Plus, Link2, GitBranch, MessageSquare, Edit2, Trash2, Save, X, ChevronRight, ChevronDown, Filter, Search, BarChart3, PieChart, TrendingUp } from 'lucide-react';
import { createClient } from 'https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2.39.3/+esm';

const RequirementsManager = () => {
  // Supabase client setup - REPLACE WITH YOUR CREDENTIALS
  const [supabaseUrl, setSupabaseUrl] = useState('');
  const [supabaseKey, setSupabaseKey] = useState('');
  const [supabase, setSupabase] = useState(null);
  const [isConfigured, setIsConfigured] = useState(false);
  
  const [items, setItems] = useState([]);
  const [relationships, setRelationships] = useState([]);
  const [comments, setComments] = useState([]);
  const [selectedItem, setSelectedItem] = useState(null);
  const [editingItem, setEditingItem] = useState(null);
  const [showNewItemForm, setShowNewItemForm] = useState(false);
  const [newComment, setNewComment] = useState('');
  const [expandedItems, setExpandedItems] = useState(new Set([1]));
  const [filterType, setFilterType] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');
  const [showRelationshipForm, setShowRelationshipForm] = useState(false);
  const [showReports, setShowReports] = useState(false);
  const [loading, setLoading] = useState(false);
  
  const itemTypes = ['epic', 'requirement', 'test-case', 'defect'];
  const statuses = ['draft', 'in-review', 'approved', 'rejected'];
  const priorities = ['low', 'medium', 'high', 'critical'];
  const relationshipTypes = ['tests', 'depends-on', 'derives-from', 'relates-to'];

  // Initialize Supabase client
  const initializeSupabase = () => {
    if (supabaseUrl && supabaseKey) {
      const client = createClient(supabaseUrl, supabaseKey);
      setSupabase(client);
      setIsConfigured(true);
      loadData(client);
    }
  };

  // Load all data from Supabase
  const loadData = async (client) => {
    setLoading(true);
    try {
      const [itemsRes, relationshipsRes, commentsRes] = await Promise.all([
        client.from('items').select('*').order('id'),
        client.from('relationships').select('*'),
        client.from('comments').select('*').order('timestamp', { ascending: false })
      ]);
      
      if (itemsRes.data) setItems(itemsRes.data);
      if (relationshipsRes.data) setRelationships(relationshipsRes.data);
      if (commentsRes.data) setComments(commentsRes.data);
    } catch (error) {
      console.error('Error loading data:', error);
      alert('Error loading data. Please check your Supabase credentials and table setup.');
    }
    setLoading(false);
  };

  // Setup database tables (call this once to initialize your Supabase database)
  const setupDatabase = async () => {
    if (!supabase) return;
    
    alert(`Please run these SQL commands in your Supabase SQL editor:

CREATE TABLE items (
  id BIGSERIAL PRIMARY KEY,
  type TEXT NOT NULL,
  title TEXT NOT NULL,
  description TEXT,
  status TEXT NOT NULL,
  priority TEXT NOT NULL,
  owner TEXT,
  version INTEGER DEFAULT 1,
  parent_id BIGINT REFERENCES items(id) ON DELETE CASCADE,
  children INTEGER[] DEFAULT '{}',
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE relationships (
  id BIGSERIAL PRIMARY KEY,
  from_id BIGINT REFERENCES items(id) ON DELETE CASCADE,
  to_id BIGINT REFERENCES items(id) ON DELETE CASCADE,
  type TEXT NOT NULL,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE comments (
  id BIGSERIAL PRIMARY KEY,
  item_id BIGINT REFERENCES items(id) ON DELETE CASCADE,
  author TEXT NOT NULL,
  text TEXT NOT NULL,
  timestamp TIMESTAMP DEFAULT NOW()
);

-- Enable Row Level Security
ALTER TABLE items ENABLE ROW LEVEL SECURITY;
ALTER TABLE relationships ENABLE ROW LEVEL SECURITY;
ALTER TABLE comments ENABLE ROW LEVEL SECURITY;

-- Create policies (adjust as needed for your security requirements)
CREATE POLICY "Enable all operations for authenticated users" ON items FOR ALL USING (true);
CREATE POLICY "Enable all operations for authenticated users" ON relationships FOR ALL USING (true);
CREATE POLICY "Enable all operations for authenticated users" ON comments FOR ALL USING (true);`);
  };

  const toggleExpand = (id) => {
    setExpandedItems(prev => {
      const next = new Set(prev);
      if (next.has(id)) next.delete(id);
      else next.add(id);
      return next;
    });
  };

  const handleCreateItem = async (formData) => {
    if (!supabase) return;
    
    try {
      const newItem = {
        type: formData.type,
        title: formData.title,
        description: formData.description,
        status: formData.status,
        priority: formData.priority,
        owner: formData.owner,
        parent_id: formData.parentId,
        children: [],
        version: 1
      };
      
      const { data, error } = await supabase.from('items').insert([newItem]).select();
      
      if (error) throw error;
      
      if (data && data[0]) {
        setItems([...items, data[0]]);
        
        if (formData.parentId) {
          const parent = items.find(i => i.id === formData.parentId);
          if (parent) {
            const updatedChildren = [...(parent.children || []), data[0].id];
            await supabase.from('items').update({ children: updatedChildren }).eq('id', formData.parentId);
            setItems(prev => prev.map(item => 
              item.id === formData.parentId 
                ? { ...item, children: updatedChildren }
                : item
            ));
          }
        }
      }
      
      setShowNewItemForm(false);
    } catch (error) {
      console.error('Error creating item:', error);
      alert('Error creating item: ' + error.message);
    }
  };

  const handleUpdateItem = async (id, updates) => {
    if (!supabase) return;
    
    try {
      const item = items.find(i => i.id === id);
      const { error } = await supabase
        .from('items')
        .update({ 
          ...updates, 
          version: item.version + 1,
          updated_at: new Date().toISOString()
        })
        .eq('id', id);
      
      if (error) throw error;
      
      setItems(prev => prev.map(item => 
        item.id === id 
          ? { ...item, ...updates, version: item.version + 1 }
          : item
      ));
      setEditingItem(null);
    } catch (error) {
      console.error('Error updating item:', error);
      alert('Error updating item: ' + error.message);
    }
  };

  const handleDeleteItem = async (id) => {
    if (!supabase) return;
    
    try {
      const item = items.find(i => i.id === id);
      
      // Remove from parent's children array
      if (item.parent_id) {
        const parent = items.find(i => i.id === item.parent_id);
        if (parent) {
          const updatedChildren = parent.children.filter(c => c !== id);
          await supabase.from('items').update({ children: updatedChildren }).eq('id', item.parent_id);
        }
      }
      
      const { error } = await supabase.from('items').delete().eq('id', id);
      
      if (error) throw error;
      
      setItems(prev => prev.filter(i => i.id !== id));
      setRelationships(prev => prev.filter(r => r.from_id !== id && r.to_id !== id));
      setSelectedItem(null);
    } catch (error) {
      console.error('Error deleting item:', error);
      alert('Error deleting item: ' + error.message);
    }
  };

  const handleAddComment = async (itemId) => {
    if (!supabase || !newComment.trim()) return;
    
    try {
      const comment = {
        item_id: itemId,
        author: 'Current User',
        text: newComment,
        timestamp: new Date().toISOString()
      };
      
      const { data, error } = await supabase.from('comments').insert([comment]).select();
      
      if (error) throw error;
      
      if (data && data[0]) {
        setComments([data[0], ...comments]);
      }
      setNewComment('');
    } catch (error) {
      console.error('Error adding comment:', error);
      alert('Error adding comment: ' + error.message);
    }
  };

  const handleAddRelationship = async (from, to, type) => {
    if (!supabase) return;
    
    try {
      const relationship = {
        from_id: from,
        to_id: to,
        type: type
      };
      
      const { data, error } = await supabase.from('relationships').insert([relationship]).select();
      
      if (error) throw error;
      
      if (data && data[0]) {
        setRelationships([...relationships, data[0]]);
      }
      setShowRelationshipForm(false);
    } catch (error) {
      console.error('Error adding relationship:', error);
      alert('Error adding relationship: ' + error.message);
    }
  };

  const getItemRelationships = (itemId) => {
    return {
      outgoing: relationships.filter(r => r.from_id === itemId),
      incoming: relationships.filter(r => r.to_id === itemId),
    };
  };

  // REPORTING CALCULATIONS
  const reportData = useMemo(() => {
    // Status breakdown by type
    const statusByType = {};
    itemTypes.forEach(type => {
      statusByType[type] = {};
      statuses.forEach(status => {
        statusByType[type][status] = items.filter(i => i.type === type && i.status === status).length;
      });
    });

    // Priority distribution
    const priorityDist = {};
    priorities.forEach(priority => {
      priorityDist[priority] = items.filter(i => i.priority === priority).length;
    });

    // Overall status distribution
    const statusDist = {};
    statuses.forEach(status => {
      statusDist[status] = items.filter(i => i.status === status).length;
    });

    // Type distribution
    const typeDist = {};
    itemTypes.forEach(type => {
      typeDist[type] = items.filter(i => i.type === type).length;
    });

    // Test coverage (test-cases linked to requirements)
    const requirements = items.filter(i => i.type === 'requirement');
    const testCases = items.filter(i => i.type === 'test-case');
    const requirementsWithTests = requirements.filter(req => 
      relationships.some(r => r.to_id === req.id && items.find(i => i.id === r.from_id && i.type === 'test-case'))
    ).length;
    
    const testCoverage = requirements.length > 0 ? (requirementsWithTests / requirements.length * 100).toFixed(1) : 0;

    // Traceability metrics
    const itemsWithRelationships = new Set([...relationships.map(r => r.from_id), ...relationships.map(r => r.to_id)]).size;
    const traceabilityScore = items.length > 0 ? (itemsWithRelationships / items.length * 100).toFixed(1) : 0;

    // Owner workload
    const ownerWorkload = {};
    items.forEach(item => {
      if (item.owner) {
        ownerWorkload[item.owner] = (ownerWorkload[item.owner] || 0) + 1;
      }
    });

    return {
      statusByType,
      priorityDist,
      statusDist,
      typeDist,
      testCoverage,
      traceabilityScore,
      ownerWorkload,
      totalItems: items.length,
      totalRelationships: relationships.length,
      totalComments: comments.length
    };
  }, [items, relationships, comments]);

  const filteredItems = useMemo(() => {
    return items.filter(item => {
      const matchesType = filterType === 'all' || item.type === filterType;
      const matchesSearch = searchTerm === '' || 
        item.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
        item.description.toLowerCase().includes(searchTerm.toLowerCase());
      return matchesType && matchesSearch;
    });
  }, [items, filterType, searchTerm]);

  const renderTreeItem = (item, level = 0) => {
    const hasChildren = item.children && item.children.length > 0;
    const isExpanded = expandedItems.has(item.id);
    const isSelected = selectedItem?.id === item.id;
    
    if (!filteredItems.find(i => i.id === item.id)) return null;

    return (
      <div key={item.id}>
        <div
          className={`flex items-center gap-2 p-2 cursor-pointer hover:bg-gray-50 ${isSelected ? 'bg-blue-50 border-l-4 border-blue-500' : ''}`}
          style={{ paddingLeft: `${level * 20 + 8}px` }}
          onClick={() => setSelectedItem(item)}
        >
          {hasChildren && (
            <button onClick={(e) => { e.stopPropagation(); toggleExpand(item.id); }} className="p-0">
              {isExpanded ? <ChevronDown size={16} /> : <ChevronRight size={16} />}
            </button>
          )}
          {!hasChildren && <div className="w-4" />}
          <span className={`px-2 py-1 text-xs rounded ${
            item.type === 'epic' ? 'bg-purple-100 text-purple-800' :
            item.type === 'requirement' ? 'bg-blue-100 text-blue-800' :
            item.type === 'test-case' ? 'bg-green-100 text-green-800' :
            'bg-red-100 text-red-800'
          }`}>
            {item.type}
          </span>
          <span className="flex-1 font-medium text-sm">{item.title}</span>
          <span className={`px-2 py-1 text-xs rounded ${
            item.priority === 'critical' ? 'bg-red-100 text-red-800' :
            item.priority === 'high' ? 'bg-orange-100 text-orange-800' :
            item.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
            'bg-gray-100 text-gray-800'
          }`}>
            {item.priority}
          </span>
        </div>
        {isExpanded && hasChildren && (
          <div>
            {item.children.map(childId => {
              const child = items.find(i => i.id === childId);
              return child ? renderTreeItem(child, level + 1) : null;
            })}
          </div>
        )}
      </div>
    );
  };

  const ItemForm = ({ item, onSave, onCancel }) => {
    const [formData, setFormData] = useState(item || {
      type: 'requirement',
      title: '',
      description: '',
      status: 'draft',
      priority: 'medium',
      owner: '',
      parentId: selectedItem?.id || null,
    });

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 w-full max-w-2xl max-h-[90vh] overflow-y-auto">
          <h3 className="text-xl font-bold mb-4">{item ? 'Edit Item' : 'New Item'}</h3>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">Type</label>
              <select
                value={formData.type}
                onChange={(e) => setFormData({ ...formData, type: e.target.value })}
                className="w-full border rounded px-3 py-2"
              >
                {itemTypes.map(type => (
                  <option key={type} value={type}>{type}</option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Title</label>
              <input
                type="text"
                value={formData.title}
                onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                className="w-full border rounded px-3 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Description</label>
              <textarea
                value={formData.description}
                onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                className="w-full border rounded px-3 py-2 h-24"
              />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-sm font-medium mb-1">Status</label>
                <select
                  value={formData.status}
                  onChange={(e) => setFormData({ ...formData, status: e.target.value })}
                  className="w-full border rounded px-3 py-2"
                >
                  {statuses.map(status => (
                    <option key={status} value={status}>{status}</option>
                  ))}
                </select>
              </div>
              <div>
                <label className="block text-sm font-medium mb-1">Priority</label>
                <select
                  value={formData.priority}
                  onChange={(e) => setFormData({ ...formData, priority: e.target.value })}
                  className="w-full border rounded px-3 py-2"
                >
                  {priorities.map(priority => (
                    <option key={priority} value={priority}>{priority}</option>
                  ))}
                </select>
              </div>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Owner</label>
              <input
                type="text"
                value={formData.owner}
                onChange={(e) => setFormData({ ...formData, owner: e.target.value })}
                className="w-full border rounded px-3 py-2"
              />
            </div>
          </div>
          <div className="flex gap-2 mt-6">
            <button
              onClick={() => item ? onSave(item.id, formData) : onSave(formData)}
              className="flex-1 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
            >
              <Save size={16} className="inline mr-2" />
              Save
            </button>
            <button
              onClick={onCancel}
              className="flex-1 bg-gray-200 px-4 py-2 rounded hover:bg-gray-300"
            >
              <X size={16} className="inline mr-2" />
              Cancel
            </button>
          </div>
        </div>
      </div>
    );
  };

  const RelationshipForm = () => {
    const [from, setFrom] = useState(selectedItem?.id || '');
    const [to, setTo] = useState('');
    const [type, setType] = useState('tests');

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
        <div className="bg-white rounded-lg p-6 w-full max-w-md">
          <h3 className="text-xl font-bold mb-4">Add Relationship</h3>
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">From Item</label>
              <select
                value={from}
                onChange={(e) => setFrom(Number(e.target.value))}
                className="w-full border rounded px-3 py-2"
              >
                <option value="">Select item...</option>
                {items.map(item => (
                  <option key={item.id} value={item.id}>
                    [{item.type}] {item.title}
                  </option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">Relationship Type</label>
              <select
                value={type}
                onChange={(e) => setType(e.target.value)}
                className="w-full border rounded px-3 py-2"
              >
                {relationshipTypes.map(rt => (
                  <option key={rt} value={rt}>{rt}</option>
                ))}
              </select>
            </div>
            <div>
              <label className="block text-sm font-medium mb-1">To Item</label>
              <select
                value={to}
                onChange={(e) => setTo(Number(e.target.value))}
                className="w-full border rounded px-3 py-2"
              >
                <option value="">Select item...</option>
                {items.filter(i => i.id !== from).map(item => (
                  <option key={item.id} value={item.id}>
                    [{item.type}] {item.title}
                  </option>
                ))}
              </select>
            </div>
          </div>
          <div className="flex gap-2 mt-6">
            <button
              onClick={() => from && to && handleAddRelationship(from, to, type)}
              disabled={!from || !to}
              className="flex-1 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 disabled:bg-gray-300"
            >
              Add Relationship
            </button>
            <button
              onClick={() => setShowRelationshipForm(false)}
              className="flex-1 bg-gray-200 px-4 py-2 rounded hover:bg-gray-300"
            >
              Cancel
            </button>
          </div>
        </div>
      </div>
    );
  };

  const ReportsView = () => {
    return (
      <div className="p-6 overflow-y-auto h-full bg-gray-50">
        <div className="max-w-7xl mx-auto">
          <h2 className="text-3xl font-bold mb-6">Project Reports & Analytics</h2>
          
          {/* Summary Cards */}
          <div className="grid grid-cols-4 gap-4 mb-6">
            <div className="bg-white p-4 rounded-lg shadow">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-500">Total Items</p>
                  <p className="text-3xl font-bold">{reportData.totalItems}</p>
                </div>
                <BarChart3 className="text-blue-500" size={32} />
              </div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-500">Test Coverage</p>
                  <p className="text-3xl font-bold">{reportData.testCoverage}%</p>
                </div>
                <PieChart className="text-green-500" size={32} />
              </div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-500">Traceability</p>
                  <p className="text-3xl font-bold">{reportData.traceabilityScore}%</p>
                </div>
                <GitBranch className="text-purple-500" size={32} />
              </div>
            </div>
            <div className="bg-white p-4 rounded-lg shadow">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-gray-500">Relationships</p>
                  <p className="text-3xl font-bold">{reportData.totalRelationships}</p>
                </div>
                <Link2 className="text-orange-500" size={32} />
              </div>
            </div>
          </div>

          <div className="grid grid-cols-2 gap-6 mb-6">
            {/* Status Distribution */}
            <div className="bg-white p-6 rounded-lg shadow">
              <h3 className="text-xl font-semibold mb-4">Status Distribution</h3>
              <div className="space-y-3">
                {Object.entries(reportData.statusDist).map(([status, count]) => (
                  <div key={status}>
                    <div className="flex justify-between mb-1">
                      <span className="capitalize">{status}</span>
                      <span className="font-semibold">{count}</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div
                        className={`h-2 rounded-full ${
                          status === 'approved' ? 'bg-green-500' :
                          status === 'in-review' ? 'bg-yellow-500' :
                          status === 'rejected' ? 'bg-red-500' :
                          'bg-gray-400'
                        }`}
                        style={{ width: `${reportData.totalItems > 0 ? (count / reportData.totalItems * 100) : 0}%` }}
                      />
                    </div>
                  </div>
                ))}
              </div>
            </div>

            {/* Type Distribution */}
            <div className="bg-white p-6 rounded-lg shadow">
              <h3 className="text-xl font-semibold mb-4">Item Type Distribution</h3>
              <div className="space-y-3">
                {Object.entries(reportData.typeDist).map(([type, count]) => (
                  <div key={type}>
                    <div className="flex justify-between mb-1">
                      <span className="capitalize">{type}</span>
                      <span className="font-semibold">{count}</span>
                    </div>
                    <div className="w-full bg-gray-200 rounded-full h-2">
                      <div
                        className={`h-2 rounded-full ${
                          type === 'epic' ? 'bg-purple-500' :
                          type === 'requirement' ? 'bg-blue-500' :
                          type === 'test-case' ? 'bg-green-500' :
                          'bg-red-500'
                        }`}
                        style={{ width: `${reportData.totalItems > 0 ? (count / reportData.totalItems * 100) : 0}%` }}
                      />
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>

          {/* Priority Distribution */}
          <div className="bg-white p-6 rounded-lg shadow mb-6">
            <h3 className="text-xl font-semibold mb-4">Priority Distribution</h3>
            <div className="grid grid-cols-4 gap-4">
              {Object.entries(reportData.priorityDist).map(([priority, count]) => (
                <div key={priority} className="text-center">
                  <div className={`text-4xl font-bold mb-2 ${
                    priority === 'critical' ? 'text-red-600' :
                    priority === 'high' ? 'text-orange-600' :
                    priority === 'medium' ? 'text-yellow-600' :
                    'text-gray-600'
                  }`}>
                    {count}
                  </div>
                  <div className="text-sm text-gray-500 capitalize">{priority}</div>
                </div>
              ))}
            </div>
          </div>

          {/* Status by Type Matrix */}
          <div className="bg-white p-6 rounded-lg shadow mb-6">
            <h3 className="text-xl font-semibold mb-4">Status by Item Type</h3>
            <div className="overflow-x-auto">
              <table className="w-full">
                <thead>
                  <tr className="border-b">
                    <th className="text-left p-2">Type</th>
                    {statuses.map(status => (
                      <th key={status} className="text-center p-2 capitalize">{status}</th>
                    ))}
                    <th className="text-center p-2">Total</th>
                  </tr>
                </thead>
                <tbody>
                  {itemTypes.map(type => (
                    <tr key={type} className="border-b hover:bg-gray-50">
                      <td className="p-2 capitalize font-medium">{type}</td>
                      {statuses.map(status => (
                        <td key={status} className="text-center p-2">
                          {reportData.statusByType[type][status] || 0}
                        </td>
                      ))}
                      <td className="text-center p-2 font-semibold">
                        {Object.values(reportData.statusByType[type]).reduce((a, b) => a + b, 0)}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
          </div>

          {/* Owner Workload */}
          <div className="bg-white p-6 rounded-lg shadow">
            <h3 className="text-xl font-semibold mb-4">Owner Workload</h3>
            {Object.keys(reportData.ownerWorkload).length > 0 ? (
              <div className="space-y-3">
                {Object.entries(reportData.ownerWorkload)
                  .sort((a, b) => b[1] - a[1])
                  .map(([owner, count]) => (
                    <div key={owner}>
                      <div className="flex justify-between mb-1">
                        <span>{owner}</span>
                        <span className="font-semibold">{count} items</span>
                      </div>
                      <div className="w-full bg-gray-200 rounded-full h-2">
                        <div
                          className="bg-blue-500 h-2 rounded-full"
                          style={{ width: `${(count / reportData.totalItems * 100)}%` }}
                        />
                      </div>
                    </div>
                  ))}
              </div>
            ) : (
              <p className="text-gray-500 text-center py-4">No owners assigned yet</p>
            )}
          </div>
        </div>
      </div>
    );
  };

  const rootItems = items.filter(item => !item.parent_id);

  // Configuration screen
  if (!isConfigured) {
    return (
      <div className="h-screen flex items-center justify-center bg-gray-50">
        <div className="bg-white p-8 rounded-lg shadow-lg max-w-2xl w-full">
          <h1 className="text-3xl font-bold mb-6 text-center">Requirements Management System</h1>
          <p className="text-gray-600 mb-6">
            Connect to your Supabase database to get started. You'll need your project URL and anon key.
          </p>
          
          <div className="space-y-4 mb-6">
            <div>
              <label className="block text-sm font-medium mb-2">Supabase Project URL</label>
              <input
                type="text"
                value={supabaseUrl}
                onChange={(e) => setSupabaseUrl(e.target.value)}
                placeholder="https://your-project.supabase.co"
                className="w-full border rounded px-4 py-2"
              />
            </div>
            <div>
              <label className="block text-sm font-medium mb-2">Supabase Anon Key</label>
              <input
                type="password"
                value={supabaseKey}
                onChange={(e) => setSupabaseKey(e.target.value)}
                placeholder="Your anon key"
                className="w-full border rounded px-4 py-2"
              />
            </div>
          </div>

          <div className="space-y-3">
            <button
              onClick={initializeSupabase}
              disabled={!supabaseUrl || !supabaseKey}
              className="w-full bg-blue-600 text-white px-4 py-3 rounded hover:bg-blue-700 disabled:bg-gray-300 font-semibold"
            >
              Connect to Supabase
            </button>
            <button
              onClick={setupDatabase}
              className="w-full bg-gray-200 text-gray-700 px-4 py-2 rounded hover:bg-gray-300"
            >
              Show Database Setup Instructions
            </button>
          </div>

          <div className="mt-6 p-4 bg-blue-50 rounded">
            <p className="text-sm text-blue-900">
              <strong>First time setup:</strong> Click "Show Database Setup Instructions" to get the SQL commands 
              you need to run in your Supabase SQL editor to create the required tables.
            </p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="h-screen flex flex-col bg-gray-50">
      <header className="bg-blue-600 text-white p-4 shadow flex justify-between items-center">
        <h1 className="text-2xl font-bold">Requirements Management System</h1>
        <div className="flex gap-2">
          <button
            onClick={() => setShowReports(!showReports)}
            className={`px-4 py-2 rounded flex items-center gap-2 ${
              showReports ? 'bg-blue-700' : 'bg-blue-500 hover:bg-blue-700'
            }`}
          >
            <TrendingUp size={18} />
            {showReports ? 'Hide Reports' : 'Show Reports'}
          </button>
          <button
            onClick={() => loadData(supabase)}
            className="px-4 py-2 bg-blue-500 rounded hover:bg-blue-700 flex items-center gap-2"
          >
            🔄 Refresh
          </button>
        </div>
      </header>

      {loading ? (
        <div className="flex-1 flex items-center justify-center">
          <div className="text-center">
            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
            <p className="text-gray-600">Loading data...</p>
          </div>
        </div>
      ) : showReports ? (
        <ReportsView />
      ) : (
        <div className="flex-1 flex overflow-hidden">
          <div className="w-1/3 bg-white border-r flex flex-col">
            <div className="p-4 border-b space-y-3">
              <div className="flex gap-2">
                <button
                  onClick={() => setShowNewItemForm(true)}
                  className="flex-1 bg-blue-600 text-white px-3 py-2 rounded hover:bg-blue-700 flex items-center justify-center gap-2"
                >
                  <Plus size={16} />
                  New Item
                </button>
                <button
                  onClick={() => setShowRelationshipForm(true)}
                  className="flex-1 bg-green-600 text-white px-3 py-2 rounded hover:bg-green-700 flex items-center justify-center gap-2"
                >
                  <Link2 size={16} />
                  Link Items
                </button>
              </div>
              <div className="flex gap-2">
                <div className="flex-1 relative">
                  <Search size={16} className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" />
                  <input
                    type="text"
                    placeholder="Search..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full border rounded pl-10 pr-3 py-2"
                  />
                </div>
                <select
                  value={filterType}
                  onChange={(e) => setFilterType(e.target.value)}
                  className="border rounded px-3 py-2"
                >
                  <option value="all">All Types</option>
                  {itemTypes.map(type => (
                    <option key={type} value={type}>{type}</option>
                  ))}
                </select>
              </div>
            </div>
            
            <div className="flex-1 overflow-y-auto">
              {rootItems.length > 0 ? (
                rootItems.map(item => renderTreeItem(item))
              ) : (
                <div className="p-4 text-center text-gray-500">
                  No items yet. Click "New Item" to create one.
                </div>
              )}
            </div>
          </div>

          <div className="flex-1 bg-white overflow-y-auto">
            {selectedItem ? (
              <div className="p-6">
                <div className="flex justify-between items-start mb-6">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-2">
                      <span className={`px-3 py-1 text-sm rounded ${
                        selectedItem.type === 'epic' ? 'bg-purple-100 text-purple-800' :
                        selectedItem.type === 'requirement' ? 'bg-blue-100 text-blue-800' :
                        selectedItem.type === 'test-case' ? 'bg-green-100 text-green-800' :
                        'bg-red-100 text-red-800'
                      }`}>
                        {selectedItem.type}
                      </span>
                      <span className="text-gray-500 text-sm">ID: {selectedItem.id} | Version: {selectedItem.version}</span>
                    </div>
                    <h2 className="text-2xl font-bold">{selectedItem.title}</h2>
                  </div>
                  <div className="flex gap-2">
                    <button
                      onClick={() => setEditingItem(selectedItem)}
                      className="p-2 text-blue-600 hover:bg-blue-50 rounded"
                    >
                      <Edit2 size={20} />
                    </button>
                    <button
                      onClick={() => handleDeleteItem(selectedItem.id)}
                      className="p-2 text-red-600 hover:bg-red-50 rounded"
                    >
                      <Trash2 size={20} />
                    </button>
                  </div>
                </div>

                <div className="grid grid-cols-2 gap-4 mb-6">
                  <div>
                    <span className="text-sm text-gray-500">Status</span>
                    <div className={`mt-1 px-3 py-1 rounded inline-block ${
                      selectedItem.status === 'approved' ? 'bg-green-100 text-green-800' :
                      selectedItem.status === 'in-review' ? 'bg-yellow-100 text-yellow-800' :
                      selectedItem.status === 'rejected' ? 'bg-red-100 text-red-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {selectedItem.status}
                    </div>
                  </div>
                  <div>
                    <span className="text-sm text-gray-500">Priority</span>
                    <div className={`mt-1 px-3 py-1 rounded inline-block ${
                      selectedItem.priority === 'critical' ? 'bg-red-100 text-red-800' :
                      selectedItem.priority === 'high' ? 'bg-orange-100 text-orange-800' :
                      selectedItem.priority === 'medium' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-gray-100 text-gray-800'
                    }`}>
                      {selectedItem.priority}
                    </div>
                  </div>
                  <div>
                    <span className="text-sm text-gray-500">Owner</span>
                    <p className="mt-1 font-medium">{selectedItem.owner || 'Unassigned'}</p>
                  </div>
                </div>

                <div className="mb-6">
                  <h3 className="font-semibold mb-2">Description</h3>
                  <p className="text-gray-700">{selectedItem.description}</p>
                </div>

                <div className="mb-6">
                  <h3 className="font-semibold mb-2 flex items-center gap-2">
                    <GitBranch size={18} />
                    Relationships
                  </h3>
                  <div className="space-y-2">
                    {getItemRelationships(selectedItem.id).outgoing.map((rel, idx) => {
                      const target = items.find(i => i.id === rel.to_id);
                      return target ? (
                        <div key={idx} className="flex items-center gap-2 p-2 bg-gray-50 rounded">
                          <span className="text-sm text-gray-600">{rel.type}</span>
                          <ChevronRight size={16} className="text-gray-400" />
                          <span className="text-sm font-medium">{target.title}</span>
                        </div>
                      ) : null;
                    })}
                    {getItemRelationships(selectedItem.id).incoming.map((rel, idx) => {
                      const source = items.find(i => i.id === rel.from_id);
                      return source ? (
                        <div key={`in-${idx}`} className="flex items-center gap-2 p-2 bg-gray-50 rounded">
                          <span className="text-sm font-medium">{source.title}</span>
                          <ChevronRight size={16} className="text-gray-400" />
                          <span className="text-sm text-gray-600">{rel.type}</span>
                          <span className="text-sm text-gray-600">this item</span>
                        </div>
                      ) : null;
                    })}
                    {getItemRelationships(selectedItem.id).outgoing.length === 0 && 
                     getItemRelationships(selectedItem.id).incoming.length === 0 && (
                      <p className="text-gray-500 text-sm">No relationships yet</p>
                    )}
                  </div>
                </div>

                <div>
                  <h3 className="font-semibold mb-2 flex items-center gap-2">
                    <MessageSquare size={18} />
                    Comments ({comments.filter(c => c.item_id === selectedItem.id).length})
                  </h3>
                  <div className="space-y-3 mb-4">
                    {comments.filter(c => c.item_id === selectedItem.id).map(comment => (
                      <div key={comment.id} className="p-3 bg-gray-50 rounded">
                        <div className="flex justify-between items-start mb-1">
                          <span className="font-medium text-sm">{comment.author}</span>
                          <span className="text-xs text-gray-500">
                            {new Date(comment.timestamp).toLocaleString()}
                          </span>
                        </div>
                        <p className="text-sm text-gray-700">{comment.text}</p>
                      </div>
                    ))}
                  </div>
                  <div className="flex gap-2">
                    <input
                      type="text"
                      value={newComment}
                      onChange={(e) => setNewComment(e.target.value)}
                      placeholder="Add a comment..."
                      className="flex-1 border rounded px-3 py-2"
                      onKeyPress={(e) => e.key === 'Enter' && handleAddComment(selectedItem.id)}
                    />
                    <button
                      onClick={() => handleAddComment(selectedItem.id)}
                      className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
                    >
                      Post
                    </button>
                  </div>
                </div>
              </div>
            ) : (
              <div className="h-full flex items-center justify-center text-gray-400">
                <div className="text-center">
                  <Filter size={48} className="mx-auto mb-4" />
                  <p>Select an item to view details</p>
                </div>
              </div>
            )}
          </div>
        </div>
      )}

      {showNewItemForm && (
        <ItemForm
          onSave={handleCreateItem}
          onCancel={() => setShowNewItemForm(false)}
        />
      )}

      {editingItem && (
        <ItemForm
          item={editingItem}
          onSave={handleUpdateItem}
          onCancel={() => setEditingItem(null)}
        />
      )}

      {showRelationshipForm && <RelationshipForm />}
    </div>
  );
};

export default RequirementsManager;
